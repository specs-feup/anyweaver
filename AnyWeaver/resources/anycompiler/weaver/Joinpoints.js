///////////////////////////////////////////////////
// This file is generated by build-interfaces.js //
///////////////////////////////////////////////////
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-duplicate-type-constituents */
import { LaraJoinPoint, registerJoinpointMapper, wrapJoinPoint, unwrapJoinPoint, } from "lara-js/api/LaraJoinPoint.js";
export class Joinpoint extends LaraJoinPoint {
    /**
     * String representation of the ast.
     */
    get ast() { return wrapJoinPoint(this._javaObject.getAst()); }
    /**
     * Gets an attribute with the given name.
     */
    getValue(name) { return wrapJoinPoint(this._javaObject.getValue(unwrapJoinPoint(name))); }
    /**
     * Removes the node associated to this joinpoint from the AST
     */
    detach() { return wrapJoinPoint(this._javaObject.detach()); }
    /**
     * Inserts the given join point after this join point
     */
    insertAfter(p1) { return wrapJoinPoint(this._javaObject.insertAfter(unwrapJoinPoint(p1))); }
    /**
     * Inserts the given join point before this join point
     */
    insertBefore(p1) { return wrapJoinPoint(this._javaObject.insertBefore(unwrapJoinPoint(p1))); }
    /**
     * Replaces this node with the given node
     */
    replaceWith(p1) { return wrapJoinPoint(this._javaObject.replaceWith(unwrapJoinPoint(p1))); }
    /**
     * Overload which accepts a list of strings
     */
    replaceWithStrings(node) { return wrapJoinPoint(this._javaObject.replaceWithStrings(unwrapJoinPoint(node))); }
}
/**
 * Any node
 */
export class Any extends Joinpoint {
    get attributes() { return wrapJoinPoint(this._javaObject.getAttributes()); }
    get selects() { return wrapJoinPoint(this._javaObject.getSelects()); }
    get actions() { return wrapJoinPoint(this._javaObject.getActions()); }
    def(attribute, value) { return wrapJoinPoint(this._javaObject.def(unwrapJoinPoint(attribute), unwrapJoinPoint(value))); }
}
/**
 * Top-level node
 */
export class App extends Joinpoint {
    get attributes() { return wrapJoinPoint(this._javaObject.getAttributes()); }
    get selects() { return wrapJoinPoint(this._javaObject.getSelects()); }
    get actions() { return wrapJoinPoint(this._javaObject.getActions()); }
    /**
     * Adds an AST to the current program, returns the inserted join point
     */
    addAst(ast) { return wrapJoinPoint(this._javaObject.addAst(unwrapJoinPoint(ast))); }
    def(attribute, value) { return wrapJoinPoint(this._javaObject.def(unwrapJoinPoint(attribute), unwrapJoinPoint(value))); }
}
const JoinpointMapper = {
    joinpoint: Joinpoint,
    any: Any,
    app: App,
};
let registered = false;
if (!registered) {
    registerJoinpointMapper(JoinpointMapper);
    registered = true;
}
//# sourceMappingURL=Joinpoints.js.map